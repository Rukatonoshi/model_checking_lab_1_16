/--
  МОДЕЛЬ СИСТЕМЫ ПОЖАРНОЙ СИГНАЛИЗАЦИИ НА ЯЗЫКЕ nuXmv
  Архитектура системы:
  1. Процесс управляющего алгоритма (alarm_controller)
  2. Процессы датчиков (sensor)
  3. Процессы актуаторов (встроены в controller)
  4. Процесс среды/пользователя (environment)
  5. Работает бесконечно за счет недетерминированных сигналов среды
--/

-- МОДУЛЬ ДАТЧИКА --
MODULE sensor(activate)
VAR
    active : boolean;  -- Состояние датчика (активен/неактивен)
ASSIGN
    -- Инициализация датчика в неактивном состоянии
    init(active) := FALSE;
    
    -- Логика изменения состояния датчика:
    -- Если есть активирующий сигнал, состояние может измениться недетерминированно
    -- Иначе сохраняет текущее состояние
    next(active) := 
        case
            activate : {TRUE, FALSE};  -- Недетерминированный выбор при активации
            TRUE : active;             -- Сохранение состояния без изменений
        esac;
        
-- Гарантия бесконечной работы процесса датчика
FAIRNESS running


-- МОДУЛЬ КОНТРОЛЛЕРА СИГНАЛИЗАЦИИ --
MODULE alarm_controller(smoke, flame, panic_button, manual_override)
VAR
    -- Состояния системы:
    alarm_on : boolean;               -- Флаг активности звуковой сигнализации
    fire_suppression_on : boolean;    -- Флаг активности системы пожаротушения
    suppression_timer : 0..10;        -- Таймер работы системы (0-10 тактов)
    suppression_active : boolean;     -- Флаг активности (учитывает все условия)
    mixture_level : 0..100;           -- Уровень огнетушащей смеси (0-100%)
    mixture_consumption_rate : 1..5;  -- Расход смеси за такт (1-5%)
    
ASSIGN
    -- Инициализация всех переменных
    init(alarm_on) := FALSE;
    init(fire_suppression_on) := FALSE;
    init(suppression_timer) := 0;
    init(suppression_active) := FALSE;
    init(mixture_level) := 100;
    init(mixture_consumption_rate) := 3;
    
    -- Логика включения звуковой сигнализации:
    -- Активируется при срабатывании любого датчика, если нет ручного отключения
    next(alarm_on) := (smoke | flame | panic_button) & !manual_override;
    
    -- Логика системы пожаротушения (3 условия выключения):
    -- 1. Ручное отключение
    -- 2. Закончилась смесь
    -- 3. Истекло время
    next(fire_suppression_on) := 
        case
            manual_override : FALSE;  -- Принудительное отключение
            mixture_level = 0 : FALSE; -- Отключение при отсутствии смеси
            suppression_timer = 0 : FALSE; -- Отключение по таймеру
            -- Активация при срабатывании датчика и наличии смеси
            (smoke | flame | panic_button) & mixture_level > 0 : TRUE;
            TRUE : fire_suppression_on; -- Сохранение состояния по умолчанию
        esac;
    
    -- Управление таймером:
    -- Сброс при выключении, установка на 10 при активации, обратный отсчет
    next(suppression_timer) := 
        case
            !fire_suppression_on : 0;  -- Сброс при неактивной системе
            -- Установка таймера при активации
            (smoke | flame | panic_button) & !fire_suppression_on : 10;
            -- Обратный отсчет
            suppression_timer > 0 : suppression_timer - 1;
            TRUE : suppression_timer;  -- Сохранение состояния
        esac;
    
    -- Управление уровнем смеси:
    -- Уменьшение при активной системе, защита от отрицательных значений
    next(mixture_level) :=
        case
            fire_suppression_on : 
                max(0, mixture_level - mixture_consumption_rate);
            TRUE : mixture_level;  -- Без изменений при неактивной системе
        esac;
    
    -- Комплексный флаг активности:
    -- Учитывает все условия (активность, таймер, уровень смеси)
    next(suppression_active) := 
        fire_suppression_on & 
        suppression_timer > 0 & 
        mixture_level >= mixture_consumption_rate;


-- МОДУЛЬ СРЕДЫ/ПОЛЬЗОВАТЕЛЯ --
MODULE environment
VAR
    -- Генераторы событий:
    generate_smoke : boolean;    -- Сигнал "Обнаружен дым"
    generate_flame : boolean;    -- Сигнал "Обнаружено пламя"
    generate_panic : boolean;    -- Сигнал "Тревожная кнопка"
    generate_override : boolean; -- Сигнал "Ручное отключение"
    
ASSIGN
    -- Инициализация всех генераторов в неактивном состоянии
    init(generate_smoke) := FALSE;
    next(generate_smoke) := {TRUE, FALSE};  -- Недетерминированная генерация
    init(generate_flame) := FALSE;
    next(generate_flame) := {TRUE, FALSE};
    init(generate_panic) := FALSE;
    next(generate_panic) := {TRUE, FALSE};
    init(generate_override) := FALSE;
    next(generate_override) := {TRUE, FALSE};
    
-- Гарантия бесконечной работы процесса среды
FAIRNESS running


-- ОСНОВНОЙ МОДУЛЬ СИСТЕМЫ --
MODULE main
VAR
    -- Процессы системы:
    env : process environment();  -- Процесс среды
    smoke_sensor : process sensor(env.generate_smoke);  -- Датчик дыма
    flame_sensor : process sensor(env.generate_flame);  -- Датчик пламени
    panic_sensor : process sensor(env.generate_panic);  -- Тревожная кнопка
    
    -- Главный контроллер системы
    controller : alarm_controller(
        smoke_sensor.active,      -- Сигнал от датчика дыма
        flame_sensor.active,      -- Сигнал от датчика пламени
        panic_sensor.active,      -- Сигнал тревожной кнопки
        env.generate_override     -- Сигнал ручного отключения
    );

/--
  ГРУППИРОВКА СПЕЦИФИКАЦИЙ СВОЙСТВ
--/

-- 1. БАЗОВЫЕ СВОЙСТВА --

-- 1.1 Инвариант: если уровень смеси = 0, система пожаротушения должна быть выключена
-- Проверяет, что система не может работать при пустом баке
-- Нарушение этого свойства означает критическую ошибку в логике управления
INVARSPEC controller.mixture_level = 0 -> !controller.fire_suppression_on

-- 1.2 LTL: при срабатывании любого датчика в следующем состоянии должна включиться сигнализация
-- Проверяет временную задержку реакции системы (не более 1 такта)
-- G - глобально (всегда), X - в следующем состоянии
-- Важно: сигнализация не включается только если было ручное отключение
LTLSPEC G ((smoke_sensor.active | flame_sensor.active | panic_sensor.active) -> 
          X controller.alarm_on)

-- 1.3 CTL: всегда существует путь к ручному отключению системы
-- AG - для всех состояний на всех путях
-- EF - существует путь, где в будущем выполнится условие
-- Гарантирует, что система не может "зависнуть" в состоянии непрерывной работы
CTLSPEC AG EF (!controller.fire_suppression_on)


-- 2. УСОВЕРШЕНСТВОВАННЫЕ СВОЙСТВА --

-- 2.1 Инвариант: система пожаротушения может быть включена ТОЛЬКО если:
-- 1. Нет ручного отключения
-- 2. Сработал хотя бы один датчик
-- 3. В баке есть смесь
-- 4. Таймер не истек
-- Полная проверка всех условий активации
INVARSPEC 
    controller.fire_suppression_on -> 
    !env.generate_override & 
    (smoke_sensor.active | flame_sensor.active | panic_sensor.active) &
    controller.mixture_level > 0 &
    controller.suppression_timer > 0

-- 2.2 LTL: если система включена, она останется включенной ДО ТЕХ ПОР, пока:
-- 1. Не истечет таймер, ИЛИ
-- 2. Не закончится смесь, ИЛИ
-- 3. Не будет ручного отключения
-- U - оператор "until" (пока не)
-- Гарантирует корректное завершение работы системы
LTLSPEC 
    G (controller.fire_suppression_on ->
        (controller.fire_suppression_on U 
            (controller.suppression_timer = 0 | 
             controller.mixture_level = 0 | 
             env.generate_override)))

-- 2.3 CTL: всегда при срабатывании датчика и отсутствии ручного отключения
-- существует путь активации пожаротушения
-- Проверяет, что система не может полностью игнорировать тревожные события
CTLSPEC 
    AG ((smoke_sensor.active | flame_sensor.active | panic_sensor.active) & 
        !env.generate_override ->
        EF controller.fire_suppression_on)


-- 3. ДОПОЛНИТЕЛЬНЫЕ ГАРАНТИИ --

-- 3.1 LTL: система не может мгновенно выключиться после активации
-- Должна проработать как минимум 1 такт (если не сработали условия остановки)
-- X - следующее состояние
LTLSPEC 
    G (controller.fire_suppression_on -> X (controller.fire_suppression_on | 
                                         controller.suppression_timer = 0 | 
                                         controller.mixture_level = 0 | 
                                         env.generate_override))

-- 3.2 CTL: после любого завершения работы (по любой причине) система
-- может быть снова активирована
-- Исключает "одноразовые" сценарии работы
CTLSPEC 
    AG (controller.fire_suppression_on & 
        (controller.suppression_timer = 0 | 
         controller.mixture_level = 0 | 
         env.generate_override) ->
        EF controller.fire_suppression_on)


/--
  ОГРАНИЧЕНИЯ СПРАВЕДЛИВОСТИ (FAIRNESS CONSTRAINTS)
  Определяют "честные" пути выполнения, которые должны рассматриваться при верификации
--/

-- 1. БАЗОВЫЕ УСЛОВИЯ РАБОТЫ --

-- Сигнализация должна срабатывать бесконечно часто
-- Исключает пути, где сигнализация никогда не включается
JUSTICE controller.alarm_on

-- Ручное отключение должно происходить бесконечно часто
-- Гарантирует проверку этого сценария
JUSTICE env.generate_override

-- Датчик дыма должен срабатывать бесконечно часто
-- Обеспечивает тестирование этого типа событий
JUSTICE smoke_sensor.active

-- Система пожаротушения должна активироваться бесконечно часто
-- Исключает пути, где система никогда не включается
JUSTICE controller.fire_suppression_on


-- 2. УСЛОВИЯ ДЛЯ ПРОВЕРКИ ПОГРАНИЧНЫХ СЛУЧАЕВ --

-- Хотя бы один датчик должен срабатывать бесконечно часто
-- Гарантирует тестирование системы с различными комбинациями датчиков
JUSTICE smoke_sensor.active | flame_sensor.active | panic_sensor.active

-- Ручное отключение во время работы системы должно происходить бесконечно часто
-- Проверка критического сценария прерывания работы
JUSTICE env.generate_override & controller.fire_suppression_on

-- Система должна работать при низком уровне смеси (<20%) бесконечно часто
-- Проверка корректности работы в условиях нехватки ресурсов
JUSTICE controller.mixture_level < 20 & controller.fire_suppression_on

-- Система должна работать при заканчивающемся времени (<3 такта) бесконечно часто
-- Проверка корректного завершения по таймеру
JUSTICE controller.suppression_timer < 3 & controller.fire_suppression_on

-- Система должна активироваться при наличии триггеров бесконечно часто
-- Комплексная проверка условий активации:
-- 1. Система выключена
-- 2. Есть сработавшие датчики
-- 3. Нет ручного отключения
JUSTICE !controller.fire_suppression_on & 
       (smoke_sensor.active | flame_sensor.active | panic_sensor.active) & 
       !env.generate_override
